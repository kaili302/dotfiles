COC problem:
- hover not work frequently
- go to definition/declaration not work frequently
- Error hint always not refreshed (need to use :e to force refreshing error hint)
- Very good hinter

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" {{ coc.nvim
"
":CocConfig
"{
	""languageserver": {
		""clangd": {
			""command": "clangd",
			""rootPatterns": ["compile_flags.txt", "compile_commands.json"],
			"// By default, clangd only knows the files you are currently editing.
			"// To provide project-wide code navigations (e.g. find references),
			"// clangd neesds a project-wide index. clangd will incrementally build
			"// an index of the project in the background in {project_roote}/.cland/
			""args": ["--background-index"],
			""filetypes": ["c", "cpp"]
		"}
	"}
"}

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" GoTo code navigation.
nmap <silent> cd <Plug>(coc-definition)
nmap <silent> cD <Plug>(coc-declaration)
nmap <silent> cr <Plug>(coc-references)
nmap <silent> ci <Plug>(coc-implementation)
nnoremap <silent> ch :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Statusline support.
let g:airline#extensions#coc#enabled = 1
let airline#extensions#coc#error_symbol = 'ERROR:'
"}}}

ALE
very difficult to use

